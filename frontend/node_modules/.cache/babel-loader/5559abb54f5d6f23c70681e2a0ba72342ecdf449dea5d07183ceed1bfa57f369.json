{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nexport default class CartStore {\n  constructor() {\n    this._cartItems = [];\n    this._cart = null;\n\n    // Загружаем сохранённые данные из localStorage, потому что если обновить стр то состояния сбрасываются и кнопки отобр некорректно, как и корзина\n    const savedCart = localStorage.getItem(\"cartStore\");\n    if (savedCart) {\n      const parsed = JSON.parse(savedCart);\n      this._cartItems = parsed.cartItems || [];\n      this._cart = parsed.cart || null;\n    }\n    makeAutoObservable(this);\n  }\n\n  // Экшены\n  setCartItems(items) {\n    this._cartItems = items.map(item => ({\n      id: item.id,\n      cart_id: item.cart_id,\n      product_id: item.product_id,\n      quantity: item.quantity\n    }));\n    this._saveToLocalStorage();\n  }\n  setCartItem(updatedItem) {\n    const index = this._cartItems.findIndex(item => item.product_id === updatedItem.product_id);\n    if (index !== -1) {\n      this._cartItems[index] = updatedItem;\n    } else {\n      this._cartItems.push(updatedItem);\n    }\n    this._saveToLocalStorage();\n  }\n  setCart(cart) {\n    this._cart = {\n      id: cart.id,\n      user_id: cart.user_id\n    };\n    this._saveToLocalStorage();\n  }\n\n  // Внутренний метод для сохранения в localStorage\n  _saveToLocalStorage() {\n    localStorage.setItem(\"cartStore\", JSON.stringify({\n      cart: this._cart,\n      cartItems: this._cartItems\n    }));\n  }\n\n  // Геттеры\n  get cart() {\n    return this._cart;\n  }\n  get cartItems() {\n    return this._cartItems;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","CartStore","constructor","_cartItems","_cart","savedCart","localStorage","getItem","parsed","JSON","parse","cartItems","cart","setCartItems","items","map","item","id","cart_id","product_id","quantity","_saveToLocalStorage","setCartItem","updatedItem","index","findIndex","push","setCart","user_id","setItem","stringify"],"sources":["C:/Users/redmi/Desktop/autoparts-shop/frontend/src/store/CartStore.js"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\r\n\r\nexport default class CartStore {\r\n  constructor() {\r\n    this._cartItems = [];\r\n    this._cart = null;\r\n\r\n    // Загружаем сохранённые данные из localStorage, потому что если обновить стр то состояния сбрасываются и кнопки отобр некорректно, как и корзина\r\n    const savedCart = localStorage.getItem(\"cartStore\");\r\n    if (savedCart) {\r\n      const parsed = JSON.parse(savedCart);\r\n      this._cartItems = parsed.cartItems || [];\r\n      this._cart = parsed.cart || null;\r\n    }\r\n\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  // Экшены\r\n  setCartItems(items) {\r\n    this._cartItems = items.map((item) => ({\r\n      id: item.id,\r\n      cart_id: item.cart_id,\r\n      product_id: item.product_id,\r\n      quantity: item.quantity,\r\n    }));\r\n    this._saveToLocalStorage();\r\n  }\r\n\r\n  setCartItem(updatedItem) {\r\n    const index = this._cartItems.findIndex((item) => item.product_id === updatedItem.product_id);\r\n    if (index !== -1) {\r\n      this._cartItems[index] = updatedItem;\r\n    } else {\r\n      this._cartItems.push(updatedItem);\r\n    }\r\n    this._saveToLocalStorage();\r\n  }\r\n\r\n  setCart(cart) {\r\n    this._cart = {\r\n      id: cart.id,\r\n      user_id: cart.user_id,\r\n    };\r\n    this._saveToLocalStorage();\r\n  }\r\n\r\n  // Внутренний метод для сохранения в localStorage\r\n  _saveToLocalStorage() {\r\n    localStorage.setItem(\r\n      \"cartStore\",\r\n      JSON.stringify({\r\n        cart: this._cart,\r\n        cartItems: this._cartItems,\r\n      })\r\n    );\r\n  }\r\n\r\n  // Геттеры\r\n  get cart() {\r\n    return this._cart;\r\n  }\r\n\r\n  get cartItems() {\r\n    return this._cartItems;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AAEzC,eAAe,MAAMC,SAAS,CAAC;EAC7BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;IACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,IAAIF,SAAS,EAAE;MACb,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;MACpC,IAAI,CAACF,UAAU,GAAGK,MAAM,CAACG,SAAS,IAAI,EAAE;MACxC,IAAI,CAACP,KAAK,GAAGI,MAAM,CAACI,IAAI,IAAI,IAAI;IAClC;IAEAZ,kBAAkB,CAAC,IAAI,CAAC;EAC1B;;EAEA;EACAa,YAAYA,CAACC,KAAK,EAAE;IAClB,IAAI,CAACX,UAAU,GAAGW,KAAK,CAACC,GAAG,CAAEC,IAAI,KAAM;MACrCC,EAAE,EAAED,IAAI,CAACC,EAAE;MACXC,OAAO,EAAEF,IAAI,CAACE,OAAO;MACrBC,UAAU,EAAEH,IAAI,CAACG,UAAU;MAC3BC,QAAQ,EAAEJ,IAAI,CAACI;IACjB,CAAC,CAAC,CAAC;IACH,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC5B;EAEAC,WAAWA,CAACC,WAAW,EAAE;IACvB,MAAMC,KAAK,GAAG,IAAI,CAACrB,UAAU,CAACsB,SAAS,CAAET,IAAI,IAAKA,IAAI,CAACG,UAAU,KAAKI,WAAW,CAACJ,UAAU,CAAC;IAC7F,IAAIK,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACrB,UAAU,CAACqB,KAAK,CAAC,GAAGD,WAAW;IACtC,CAAC,MAAM;MACL,IAAI,CAACpB,UAAU,CAACuB,IAAI,CAACH,WAAW,CAAC;IACnC;IACA,IAAI,CAACF,mBAAmB,CAAC,CAAC;EAC5B;EAEAM,OAAOA,CAACf,IAAI,EAAE;IACZ,IAAI,CAACR,KAAK,GAAG;MACXa,EAAE,EAAEL,IAAI,CAACK,EAAE;MACXW,OAAO,EAAEhB,IAAI,CAACgB;IAChB,CAAC;IACD,IAAI,CAACP,mBAAmB,CAAC,CAAC;EAC5B;;EAEA;EACAA,mBAAmBA,CAAA,EAAG;IACpBf,YAAY,CAACuB,OAAO,CAClB,WAAW,EACXpB,IAAI,CAACqB,SAAS,CAAC;MACblB,IAAI,EAAE,IAAI,CAACR,KAAK;MAChBO,SAAS,EAAE,IAAI,CAACR;IAClB,CAAC,CACH,CAAC;EACH;;EAEA;EACA,IAAIS,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACR,KAAK;EACnB;EAEA,IAAIO,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAACR,UAAU;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}