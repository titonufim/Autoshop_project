{"ast":null,"code":"// для работы с mobx\nimport { makeAutoObservable } from \"mobx\";\nimport { login as loginApi, registration as registrationApi, check_auth as checkAuthApi, deleteUser as del } from \"../http/userAPI\";\nexport default class UserStore {\n  constructor() {\n    this._isAuth = false; // _ - переменная изменяться не может\n    this._user = {};\n    makeAutoObservable(this);\n  }\n\n  // экшены - функции изменяющие состояние\n  setIsAuth(bool) {\n    this._isAuth = bool;\n  }\n  setUser(user) {\n    this._user = user;\n  }\n  logout() {\n    this._isAuth = false;\n    this._user = {};\n    localStorage.removeItem(\"token\");\n  }\n\n  // для получения переменных из нашего состояния\n  // это computed функции, которые вызываются только в том случае, если переменная используемая внутри была изменена (из appRouter)\n  get isAuth() {\n    return this._isAuth;\n  }\n  get user() {\n    return this._user;\n  }\n}\n\n// import { makeAutoObservable } from \"mobx\";\n// import { login, registration, check_auth } from \"../http/userAPI\";\n\n// class UserStore {\n//   _isAuth = false; // Состояние авторизации\n//   _user = {}; // Данные пользователя\n//   _isLoading = false; // Загрузка\n\n//   constructor() {\n//     makeAutoObservable(this);\n//   }\n\n//   // Функции для изменения состояния\n//   setIsAuth(bool) {\n//     this._isAuth = bool;\n//   }\n\n//   setUser(user) {\n//     this._user = user;\n//   }\n\n//   setIsLoading(bool) {\n//     this._isLoading = bool;\n//   }\n\n//   // Эффект для проверки авторизации\n//   async checkAuth() {\n//     this.setIsLoading(true);\n//     try {\n//       const data = await check_auth();\n//       this.setUser(data);\n//       this.setIsAuth(true);\n//     } catch (e) {\n//       console.log(\"Auth failed\");\n//       this.setIsAuth(false);\n//     } finally {\n//       this.setIsLoading(false);\n//     }\n//   }\n\n//   // Авторизация\n//   async login(email, password) {\n//     try {\n//       const data = await login(email, password);\n//       this.setUser(data);\n//       this.setIsAuth(true);\n//     } catch (e) {\n//       console.log(\"Login failed\");\n//       this.setIsAuth(false);\n//     }\n//   }\n\n//   // Регистрация\n//   async registration(name, email, password) {\n//     try {\n//       const data = await registration(name, email, password);\n//       this.setUser(data);\n//       this.setIsAuth(true);\n//     } catch (e) {\n//       console.log(\"Registration failed\");\n//       this.setIsAuth(false);\n//     }\n//   }\n\n//   // Логаут (выход)\n//   logout() {\n//     localStorage.removeItem(\"token\");\n//     this.setUser({});\n//     this.setIsAuth(false);\n//   }\n\n//   // Геттеры\n//   get isAuth() {\n//     return this._isAuth;\n//   }\n\n//   get user() {\n//     return this._user;\n//   }\n\n//   get isLoading() {\n//     return this._isLoading;\n//   }\n// }\n\n// export default new UserStore();","map":{"version":3,"names":["makeAutoObservable","login","loginApi","registration","registrationApi","check_auth","checkAuthApi","deleteUser","del","UserStore","constructor","_isAuth","_user","setIsAuth","bool","setUser","user","logout","localStorage","removeItem","isAuth"],"sources":["C:/Users/redmi/Desktop/autoparts-shop/frontend/src/store/UserStore.js"],"sourcesContent":["// для работы с mobx\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport {\r\n  login as loginApi,\r\n  registration as registrationApi,\r\n  check_auth as checkAuthApi,\r\n  deleteUser as del,\r\n} from \"../http/userAPI\";\r\n\r\nexport default class UserStore {\r\n  constructor() {\r\n    this._isAuth = false; // _ - переменная изменяться не может\r\n    this._user = {};\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  // экшены - функции изменяющие состояние\r\n  setIsAuth(bool) {\r\n    this._isAuth = bool;\r\n  }\r\n  setUser(user) {\r\n    this._user = user;\r\n  }\r\n\r\n  logout() {\r\n    this._isAuth = false;\r\n    this._user = {};\r\n    localStorage.removeItem(\"token\");\r\n  }\r\n\r\n  // для получения переменных из нашего состояния\r\n  // это computed функции, которые вызываются только в том случае, если переменная используемая внутри была изменена (из appRouter)\r\n  get isAuth() {\r\n    return this._isAuth;\r\n  }\r\n\r\n  get user() {\r\n    return this._user;\r\n  }\r\n}\r\n\r\n// import { makeAutoObservable } from \"mobx\";\r\n// import { login, registration, check_auth } from \"../http/userAPI\";\r\n\r\n// class UserStore {\r\n//   _isAuth = false; // Состояние авторизации\r\n//   _user = {}; // Данные пользователя\r\n//   _isLoading = false; // Загрузка\r\n\r\n//   constructor() {\r\n//     makeAutoObservable(this);\r\n//   }\r\n\r\n//   // Функции для изменения состояния\r\n//   setIsAuth(bool) {\r\n//     this._isAuth = bool;\r\n//   }\r\n\r\n//   setUser(user) {\r\n//     this._user = user;\r\n//   }\r\n\r\n//   setIsLoading(bool) {\r\n//     this._isLoading = bool;\r\n//   }\r\n\r\n//   // Эффект для проверки авторизации\r\n//   async checkAuth() {\r\n//     this.setIsLoading(true);\r\n//     try {\r\n//       const data = await check_auth();\r\n//       this.setUser(data);\r\n//       this.setIsAuth(true);\r\n//     } catch (e) {\r\n//       console.log(\"Auth failed\");\r\n//       this.setIsAuth(false);\r\n//     } finally {\r\n//       this.setIsLoading(false);\r\n//     }\r\n//   }\r\n\r\n//   // Авторизация\r\n//   async login(email, password) {\r\n//     try {\r\n//       const data = await login(email, password);\r\n//       this.setUser(data);\r\n//       this.setIsAuth(true);\r\n//     } catch (e) {\r\n//       console.log(\"Login failed\");\r\n//       this.setIsAuth(false);\r\n//     }\r\n//   }\r\n\r\n//   // Регистрация\r\n//   async registration(name, email, password) {\r\n//     try {\r\n//       const data = await registration(name, email, password);\r\n//       this.setUser(data);\r\n//       this.setIsAuth(true);\r\n//     } catch (e) {\r\n//       console.log(\"Registration failed\");\r\n//       this.setIsAuth(false);\r\n//     }\r\n//   }\r\n\r\n//   // Логаут (выход)\r\n//   logout() {\r\n//     localStorage.removeItem(\"token\");\r\n//     this.setUser({});\r\n//     this.setIsAuth(false);\r\n//   }\r\n\r\n//   // Геттеры\r\n//   get isAuth() {\r\n//     return this._isAuth;\r\n//   }\r\n\r\n//   get user() {\r\n//     return this._user;\r\n//   }\r\n\r\n//   get isLoading() {\r\n//     return this._isLoading;\r\n//   }\r\n// }\r\n\r\n// export default new UserStore();\r\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SACEC,KAAK,IAAIC,QAAQ,EACjBC,YAAY,IAAIC,eAAe,EAC/BC,UAAU,IAAIC,YAAY,EAC1BC,UAAU,IAAIC,GAAG,QACZ,iBAAiB;AAExB,eAAe,MAAMC,SAAS,CAAC;EAC7BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC,CAAC;IACtB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACfZ,kBAAkB,CAAC,IAAI,CAAC;EAC1B;;EAEA;EACAa,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,CAACH,OAAO,GAAGG,IAAI;EACrB;EACAC,OAAOA,CAACC,IAAI,EAAE;IACZ,IAAI,CAACJ,KAAK,GAAGI,IAAI;EACnB;EAEAC,MAAMA,CAAA,EAAG;IACP,IAAI,CAACN,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACfM,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC;;EAEA;EACA;EACA,IAAIC,MAAMA,CAAA,EAAG;IACX,OAAO,IAAI,CAACT,OAAO;EACrB;EAEA,IAAIK,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACJ,KAAK;EACnB;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}