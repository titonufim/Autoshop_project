{"ast":null,"code":"// для работы с mobx\nimport { makeAutoObservable } from \"mobx\";\n// import {\n//   login as loginApi,\n//   registration as registrationApi,\n//   check_auth as checkAuthApi,\n//   deleteUser as del,\n// } from \"../http/userAPI\";\n\nexport default class UserStore {\n  constructor() {\n    this._isAuth = false; // _ - переменная изменяться не может\n    this._user = {};\n    makeAutoObservable(this);\n  }\n\n  // экшены - функции изменяющие состояние\n  setIsAuth(bool) {\n    this._isAuth = bool;\n  }\n  setUser(user) {\n    this._user = user;\n  }\n  logout() {\n    this._isAuth = false;\n    this._user = {};\n    localStorage.removeItem(\"token\");\n  }\n\n  // для получения переменных из нашего состояния\n  // это computed функции, которые вызываются только в том случае, если переменная используемая внутри была изменена (из appRouter)\n  get isAuth() {\n    return this._isAuth;\n  }\n  get user() {\n    return this._user;\n  }\n}","map":{"version":3,"names":["makeAutoObservable","UserStore","constructor","_isAuth","_user","setIsAuth","bool","setUser","user","logout","localStorage","removeItem","isAuth"],"sources":["C:/Users/redmi/Desktop/autoparts-shop/frontend/src/store/UserStore.js"],"sourcesContent":["// для работы с mobx\r\nimport { makeAutoObservable } from \"mobx\";\r\n// import {\r\n//   login as loginApi,\r\n//   registration as registrationApi,\r\n//   check_auth as checkAuthApi,\r\n//   deleteUser as del,\r\n// } from \"../http/userAPI\";\r\n\r\nexport default class UserStore {\r\n  constructor() {\r\n    this._isAuth = false; // _ - переменная изменяться не может\r\n    this._user = {};\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  // экшены - функции изменяющие состояние\r\n  setIsAuth(bool) {\r\n    this._isAuth = bool;\r\n  }\r\n  setUser(user) {\r\n    this._user = user;\r\n  }\r\n\r\n  logout() {\r\n    this._isAuth = false;\r\n    this._user = {};\r\n    localStorage.removeItem(\"token\");\r\n  }\r\n\r\n  // для получения переменных из нашего состояния\r\n  // это computed функции, которые вызываются только в том случае, если переменная используемая внутри была изменена (из appRouter)\r\n  get isAuth() {\r\n    return this._isAuth;\r\n  }\r\n\r\n  get user() {\r\n    return this._user;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,MAAMC,SAAS,CAAC;EAC7BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC,CAAC;IACtB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACfJ,kBAAkB,CAAC,IAAI,CAAC;EAC1B;;EAEA;EACAK,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,CAACH,OAAO,GAAGG,IAAI;EACrB;EACAC,OAAOA,CAACC,IAAI,EAAE;IACZ,IAAI,CAACJ,KAAK,GAAGI,IAAI;EACnB;EAEAC,MAAMA,CAAA,EAAG;IACP,IAAI,CAACN,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACfM,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC;;EAEA;EACA;EACA,IAAIC,MAAMA,CAAA,EAAG;IACX,OAAO,IAAI,CAACT,OAAO;EACrB;EAEA,IAAIK,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACJ,KAAK;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}