{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\redmi\\\\Desktop\\\\autoparts-shop\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from \"react\"; // Import useEffect here\nimport { Context } from \"./index\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport { observer } from \"mobx-react-lite\";\n\n// Assuming check is a function you want to use for checking user authentication\nimport { check } from \"./somePathToYourCheckFunction\"; // Adjust the import path accordingly\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = _s(observer(_c = _s(() => {\n  _s();\n  const {\n    user\n  } = useContext(Context);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    check().then(data => {\n      user.setUser(true);\n      user.setIsAuth(true);\n    }).finally(() => setLoading(false));\n  }, []); // Empty dependency array means this will run once when the component mounts.\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppRouter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}, \"4mt1jDoDt0h52XCxQdiEl89i/LM=\")), \"4mt1jDoDt0h52XCxQdiEl89i/LM=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App$observer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useContext","useState","useEffect","Context","BrowserRouter","AppRouter","NavBar","observer","check","jsxDEV","_jsxDEV","App","_s","_c","user","loading","setLoading","then","data","setUser","setIsAuth","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/redmi/Desktop/autoparts-shop/frontend/src/App.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\"; // Import useEffect here\nimport { Context } from \"./index\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport { observer } from \"mobx-react-lite\";\n\n// Assuming check is a function you want to use for checking user authentication\nimport { check } from \"./somePathToYourCheckFunction\"; // Adjust the import path accordingly\n\nconst App = observer(() => {\n  const { user } = useContext(Context);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    check()\n      .then((data) => {\n        user.setUser(true);\n        user.setIsAuth(true);\n      })\n      .finally(() => setLoading(false));\n  }, []); // Empty dependency array means this will run once when the component mounts.\n\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <AppRouter />\n    </BrowserRouter>\n  );\n});\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;AAChE,SAASC,OAAO,QAAQ,SAAS;AACjC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,QAAQ,QAAQ,iBAAiB;;AAE1C;AACA,SAASC,KAAK,QAAQ,+BAA+B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,GAAG,GAAAC,EAAA,CAAGL,QAAQ,CAAAM,EAAA,GAAAD,EAAA,CAAC,MAAM;EAAAA,EAAA;EACzB,MAAM;IAAEE;EAAK,CAAC,GAAGd,UAAU,CAACG,OAAO,CAAC;EACpC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdM,KAAK,CAAC,CAAC,CACJS,IAAI,CAAEC,IAAI,IAAK;MACdJ,IAAI,CAACK,OAAO,CAAC,IAAI,CAAC;MAClBL,IAAI,CAACM,SAAS,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,CACDC,OAAO,CAAC,MAAML,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEN,OAAA,CAACN,aAAa;IAAAkB,QAAA,gBACZZ,OAAA,CAACJ,MAAM;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVhB,OAAA,CAACL,SAAS;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEpB,CAAC,kCAAC;AAACC,GAAA,GAnBGhB,GAAG;AAqBT,eAAeA,GAAG;AAAC,IAAAE,EAAA,EAAAc,GAAA;AAAAC,YAAA,CAAAf,EAAA;AAAAe,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}