{"ast":null,"code":"import { $authHost, $host } from \"./index\"; // импортируем экземпляры Axios для авторизованных и неавторизованных запросов\n\n// реализуем регистрацию авторизацию и проверку токена на валидность\nexport const createProd = async product => {\n  const {\n    data\n  } = await $authHost.post(\"api/product\", product, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  });\n  return data;\n};\n\n//+\nexport const getAllProduct = async () => {\n  const {\n    data\n  } = await $host.get(\"api/product\");\n  return data.rows; // возвращаем сразу массив товаров, поскольку на бэке есть count, который нужен будет для пагинации\n};\nexport const updateProduct = async () => {\n  //   const { data } = await $authHost.get(\"api/user/auth\");\n  //   localStorage.setItem(\"token\", data.token);\n  //   return jwtDecode(data.token);\n};\nexport const deleteProduct = async () => {\n  //   const { data } = await $authHost.delete(\"api/user/\");\n  //   return data; // Возвращаем результат\n};\n\n// +\nexport const createCat = async category => {\n  const {\n    data\n  } = await $authHost.post(\"api/category\", category);\n  return data;\n};\n\n//+\nexport const getCategory = async () => {\n  const {\n    data\n  } = await $host.get(\"api/category\");\n  return data;\n};\n\n// router.post(\"/\", checkRole(\"admin\"), ProductController.create);\n// router.get(\"/\", ProductController.getAll);\n// router.get(\"/:id\", ProductController.getOne);\n// router.put(\"/:id\", checkRole(\"admin\"), ProductController.update);\n// router.delete(\"/:id\", checkRole(\"admin\"), ProductController.delete);\n\n// router.post(\"/\", checkRole(\"admin\"), CategoryController.create);\n// router.get(\"/\", CategoryController.getAll);\n// router.get(\"/:id\", CategoryController.getOne);\n// router.put(\"/:id\", checkRole(\"admin\"), CategoryController.update);\n// router.delete(\"/:id\", checkRole(\"admin\"), CategoryController.delete);","map":{"version":3,"names":["$authHost","$host","createProd","product","data","post","headers","getAllProduct","get","rows","updateProduct","deleteProduct","createCat","category","getCategory"],"sources":["C:/Users/redmi/Desktop/autoparts-shop/frontend/src/http/product_categoryAPI.js"],"sourcesContent":["import { $authHost, $host } from \"./index\"; // импортируем экземпляры Axios для авторизованных и неавторизованных запросов\r\n\r\n// реализуем регистрацию авторизацию и проверку токена на валидность\r\nexport const createProd = async (product) => {\r\n  const { data } = await $authHost.post(\"api/product\", product, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n  });\r\n  return data;\r\n};\r\n\r\n//+\r\nexport const getAllProduct = async () => {\r\n  const { data } = await $host.get(\"api/product\");\r\n  return data.rows; // возвращаем сразу массив товаров, поскольку на бэке есть count, который нужен будет для пагинации\r\n};\r\n\r\nexport const updateProduct = async () => {\r\n  //   const { data } = await $authHost.get(\"api/user/auth\");\r\n  //   localStorage.setItem(\"token\", data.token);\r\n  //   return jwtDecode(data.token);\r\n};\r\n\r\nexport const deleteProduct = async () => {\r\n  //   const { data } = await $authHost.delete(\"api/user/\");\r\n  //   return data; // Возвращаем результат\r\n};\r\n\r\n// +\r\nexport const createCat = async (category) => {\r\n  const { data } = await $authHost.post(\"api/category\", category);\r\n  return data;\r\n};\r\n\r\n//+\r\nexport const getCategory = async () => {\r\n  const { data } = await $host.get(\"api/category\");\r\n  return data;\r\n};\r\n\r\n// router.post(\"/\", checkRole(\"admin\"), ProductController.create);\r\n// router.get(\"/\", ProductController.getAll);\r\n// router.get(\"/:id\", ProductController.getOne);\r\n// router.put(\"/:id\", checkRole(\"admin\"), ProductController.update);\r\n// router.delete(\"/:id\", checkRole(\"admin\"), ProductController.delete);\r\n\r\n// router.post(\"/\", checkRole(\"admin\"), CategoryController.create);\r\n// router.get(\"/\", CategoryController.getAll);\r\n// router.get(\"/:id\", CategoryController.getOne);\r\n// router.put(\"/:id\", checkRole(\"admin\"), CategoryController.update);\r\n// router.delete(\"/:id\", checkRole(\"admin\"), CategoryController.delete);\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,SAAS,CAAC,CAAC;;AAE5C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,OAAO,IAAK;EAC3C,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAC,aAAa,EAAEF,OAAO,EAAE;IAC5DG,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOF,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAM;IAAEH;EAAK,CAAC,GAAG,MAAMH,KAAK,CAACO,GAAG,CAAC,aAAa,CAAC;EAC/C,OAAOJ,IAAI,CAACK,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC;EACA;EACA;AAAA,CACD;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC;EACA;AAAA,CACD;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAQ,IAAK;EAC3C,MAAM;IAAET;EAAK,CAAC,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAC,cAAc,EAAEQ,QAAQ,CAAC;EAC/D,OAAOT,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAM;IAAEV;EAAK,CAAC,GAAG,MAAMH,KAAK,CAACO,GAAG,CAAC,cAAc,CAAC;EAChD,OAAOJ,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}