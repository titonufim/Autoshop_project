{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\redmi\\\\Desktop\\\\autoparts-shop\\\\frontend\\\\src\\\\components\\\\AppRouter.js\";\n// для навигации по страницам\nimport React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { authRoutes, publicRoutes } from \"../routes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppRouter = () => {\n  const isAuth = false;\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [iaAuth === true && authRoutes.map(({\n      path,\n      Component\n    }) => /*#__PURE__*/_jsxDEV(Route, {\n      path: path,\n      component: Component,\n      exact: true\n    }, path, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 36\n    }, this) // exact говорит о том, что ключ должен полностью совпадать\n    ), publicRoutes.map(({\n      path,\n      Component\n    }) => /*#__PURE__*/_jsxDEV(Route, {\n      path: path,\n      component: Component,\n      exact: true\n    }, path, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this) // exact говорит о том, что ключ должен полностью совпадать\n    )]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this); // если ни один из маршрутов не отработает, то отработает самый последний в этом switch\n};\n_c = AppRouter;\nexport default AppRouter;\nvar _c;\n$RefreshReg$(_c, \"AppRouter\");","map":{"version":3,"names":["React","Switch","Route","Redirect","authRoutes","publicRoutes","jsxDEV","_jsxDEV","AppRouter","isAuth","children","iaAuth","map","path","Component","component","exact","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/redmi/Desktop/autoparts-shop/frontend/src/components/AppRouter.js"],"sourcesContent":["// для навигации по страницам\r\nimport React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { authRoutes, publicRoutes } from \"../routes\";\r\n\r\nconst AppRouter = () => {\r\n  const isAuth = false;\r\n\r\n  return (\r\n    <Switch>\r\n      {iaAuth === true &&\r\n        authRoutes.map(\r\n          ({ path, Component }) => <Route key={path} path={path} component={Component} exact /> // exact говорит о том, что ключ должен полностью совпадать\r\n        )}\r\n      {publicRoutes.map(\r\n        ({ path, Component }) => (\r\n          <Route key={path} path={path} component={Component} exact />\r\n        ) // exact говорит о том, что ключ должен полностью совпадать\r\n      )}\r\n    </Switch>\r\n  ); // если ни один из маршрутов не отработает, то отработает самый последний в этом switch\r\n};\r\n\r\nexport default AppRouter;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAC1D,SAASC,UAAU,EAAEC,YAAY,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAMC,MAAM,GAAG,KAAK;EAEpB,oBACEF,OAAA,CAACN,MAAM;IAAAS,QAAA,GACJC,MAAM,KAAK,IAAI,IACdP,UAAU,CAACQ,GAAG,CACZ,CAAC;MAAEC,IAAI;MAAEC;IAAU,CAAC,kBAAKP,OAAA,CAACL,KAAK;MAAYW,IAAI,EAAEA,IAAK;MAACE,SAAS,EAAED,SAAU;MAACE,KAAK;IAAA,GAA7CH,IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2C,CAAC,CAAC;IACxF,CAAC,EACFf,YAAY,CAACO,GAAG,CACf,CAAC;MAAEC,IAAI;MAAEC;IAAU,CAAC,kBAClBP,OAAA,CAACL,KAAK;MAAYW,IAAI,EAAEA,IAAK;MAACE,SAAS,EAAED,SAAU;MAACE,KAAK;IAAA,GAA7CH,IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2C,CAC5D,CAAC;IACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC,CACT,CAAC;AACL,CAAC;AAACC,EAAA,GAhBIb,SAAS;AAkBf,eAAeA,SAAS;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}