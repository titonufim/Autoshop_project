{"ast":null,"code":"// // для работы с mobx\n// import { makeAutoObservable } from \"mobx\";\n\n// export default class UserStore {\n//   constructor() {\n//     this._isAuth = false; // _ - переменная изменяться не может\n//     this._user = {};\n//     makeAutoObservable(this);\n//   }\n\n//   // экшены - функции изменяющие состояние\n//   setIsAuth(bool) {\n//     this._isAuth = bool;\n//   }\n//   setUser(user) {\n//     this._user = user;\n//   }\n\n//   // для получения переменных из нашего состояния\n//   // это computed функции, которые вызываются только в том случае, если переменная используемая внутри была изменена (из appRouter)\n//   get isAuth() {\n//     return this._isAuth;\n//   }\n\n//   get user() {\n//     return this._user;\n//   }\n// }\n\nimport { makeAutoObservable } from \"mobx\";\nimport { login, registration, check_auth } from \"../http/userAPI\";\nclass UserStore {\n  // Загрузка\n\n  constructor() {\n    this._isAuth = false;\n    // Состояние авторизации\n    this._user = {};\n    // Данные пользователя\n    this._isLoading = false;\n    makeAutoObservable(this);\n  }\n\n  // Функции для изменения состояния\n  setIsAuth(bool) {\n    this._isAuth = bool;\n  }\n  setUser(user) {\n    this._user = user;\n  }\n  setIsLoading(bool) {\n    this._isLoading = bool;\n  }\n\n  // Эффект для проверки авторизации\n  async checkAuth() {\n    this.setIsLoading(true);\n    try {\n      const data = await check_auth();\n      this.setUser(data);\n      this.setIsAuth(true);\n    } catch (e) {\n      console.log(\"Auth failed\");\n      this.setIsAuth(false);\n    } finally {\n      this.setIsLoading(false);\n    }\n  }\n\n  // Авторизация\n  async login(email, password) {\n    try {\n      const data = await login(email, password);\n      this.setUser(data);\n      this.setIsAuth(true);\n    } catch (e) {\n      console.log(\"Login failed\");\n      this.setIsAuth(false);\n    }\n  }\n\n  // Регистрация\n  async registration(name, email, password) {\n    try {\n      const data = await registration(name, email, password);\n      this.setUser(data);\n      this.setIsAuth(true);\n    } catch (e) {\n      console.log(\"Registration failed\");\n      this.setIsAuth(false);\n    }\n  }\n\n  // Логаут (выход)\n  logout() {\n    localStorage.removeItem(\"token\");\n    this.setUser({});\n    this.setIsAuth(false);\n  }\n\n  // Геттеры\n  get isAuth() {\n    return this._isAuth;\n  }\n  get user() {\n    return this._user;\n  }\n  get isLoading() {\n    return this._isLoading;\n  }\n}\nexport default new UserStore();","map":{"version":3,"names":["makeAutoObservable","login","registration","check_auth","UserStore","constructor","_isAuth","_user","_isLoading","setIsAuth","bool","setUser","user","setIsLoading","checkAuth","data","e","console","log","email","password","name","logout","localStorage","removeItem","isAuth","isLoading"],"sources":["C:/Users/redmi/Desktop/autoparts-shop/frontend/src/store/UserStore.js"],"sourcesContent":["// // для работы с mobx\r\n// import { makeAutoObservable } from \"mobx\";\r\n\r\n// export default class UserStore {\r\n//   constructor() {\r\n//     this._isAuth = false; // _ - переменная изменяться не может\r\n//     this._user = {};\r\n//     makeAutoObservable(this);\r\n//   }\r\n\r\n//   // экшены - функции изменяющие состояние\r\n//   setIsAuth(bool) {\r\n//     this._isAuth = bool;\r\n//   }\r\n//   setUser(user) {\r\n//     this._user = user;\r\n//   }\r\n\r\n//   // для получения переменных из нашего состояния\r\n//   // это computed функции, которые вызываются только в том случае, если переменная используемая внутри была изменена (из appRouter)\r\n//   get isAuth() {\r\n//     return this._isAuth;\r\n//   }\r\n\r\n//   get user() {\r\n//     return this._user;\r\n//   }\r\n// }\r\n\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { login, registration, check_auth } from \"../http/userAPI\";\r\n\r\nclass UserStore {\r\n  _isAuth = false; // Состояние авторизации\r\n  _user = {}; // Данные пользователя\r\n  _isLoading = false; // Загрузка\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  // Функции для изменения состояния\r\n  setIsAuth(bool) {\r\n    this._isAuth = bool;\r\n  }\r\n\r\n  setUser(user) {\r\n    this._user = user;\r\n  }\r\n\r\n  setIsLoading(bool) {\r\n    this._isLoading = bool;\r\n  }\r\n\r\n  // Эффект для проверки авторизации\r\n  async checkAuth() {\r\n    this.setIsLoading(true);\r\n    try {\r\n      const data = await check_auth();\r\n      this.setUser(data);\r\n      this.setIsAuth(true);\r\n    } catch (e) {\r\n      console.log(\"Auth failed\");\r\n      this.setIsAuth(false);\r\n    } finally {\r\n      this.setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  // Авторизация\r\n  async login(email, password) {\r\n    try {\r\n      const data = await login(email, password);\r\n      this.setUser(data);\r\n      this.setIsAuth(true);\r\n    } catch (e) {\r\n      console.log(\"Login failed\");\r\n      this.setIsAuth(false);\r\n    }\r\n  }\r\n\r\n  // Регистрация\r\n  async registration(name, email, password) {\r\n    try {\r\n      const data = await registration(name, email, password);\r\n      this.setUser(data);\r\n      this.setIsAuth(true);\r\n    } catch (e) {\r\n      console.log(\"Registration failed\");\r\n      this.setIsAuth(false);\r\n    }\r\n  }\r\n\r\n  // Логаут (выход)\r\n  logout() {\r\n    localStorage.removeItem(\"token\");\r\n    this.setUser({});\r\n    this.setIsAuth(false);\r\n  }\r\n\r\n  // Геттеры\r\n  get isAuth() {\r\n    return this._isAuth;\r\n  }\r\n\r\n  get user() {\r\n    return this._user;\r\n  }\r\n\r\n  get isLoading() {\r\n    return this._isLoading;\r\n  }\r\n}\r\n\r\nexport default new UserStore();\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SAASC,KAAK,EAAEC,YAAY,EAAEC,UAAU,QAAQ,iBAAiB;AAEjE,MAAMC,SAAS,CAAC;EAGM;;EAEpBC,WAAWA,CAAA,EAAG;IAAA,KAJdC,OAAO,GAAG,KAAK;IAAE;IAAA,KACjBC,KAAK,GAAG,CAAC,CAAC;IAAE;IAAA,KACZC,UAAU,GAAG,KAAK;IAGhBR,kBAAkB,CAAC,IAAI,CAAC;EAC1B;;EAEA;EACAS,SAASA,CAACC,IAAI,EAAE;IACd,IAAI,CAACJ,OAAO,GAAGI,IAAI;EACrB;EAEAC,OAAOA,CAACC,IAAI,EAAE;IACZ,IAAI,CAACL,KAAK,GAAGK,IAAI;EACnB;EAEAC,YAAYA,CAACH,IAAI,EAAE;IACjB,IAAI,CAACF,UAAU,GAAGE,IAAI;EACxB;;EAEA;EACA,MAAMI,SAASA,CAAA,EAAG;IAChB,IAAI,CAACD,YAAY,CAAC,IAAI,CAAC;IACvB,IAAI;MACF,MAAME,IAAI,GAAG,MAAMZ,UAAU,CAAC,CAAC;MAC/B,IAAI,CAACQ,OAAO,CAACI,IAAI,CAAC;MAClB,IAAI,CAACN,SAAS,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOO,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1B,IAAI,CAACT,SAAS,CAAC,KAAK,CAAC;IACvB,CAAC,SAAS;MACR,IAAI,CAACI,YAAY,CAAC,KAAK,CAAC;IAC1B;EACF;;EAEA;EACA,MAAMZ,KAAKA,CAACkB,KAAK,EAAEC,QAAQ,EAAE;IAC3B,IAAI;MACF,MAAML,IAAI,GAAG,MAAMd,KAAK,CAACkB,KAAK,EAAEC,QAAQ,CAAC;MACzC,IAAI,CAACT,OAAO,CAACI,IAAI,CAAC;MAClB,IAAI,CAACN,SAAS,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOO,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B,IAAI,CAACT,SAAS,CAAC,KAAK,CAAC;IACvB;EACF;;EAEA;EACA,MAAMP,YAAYA,CAACmB,IAAI,EAAEF,KAAK,EAAEC,QAAQ,EAAE;IACxC,IAAI;MACF,MAAML,IAAI,GAAG,MAAMb,YAAY,CAACmB,IAAI,EAAEF,KAAK,EAAEC,QAAQ,CAAC;MACtD,IAAI,CAACT,OAAO,CAACI,IAAI,CAAC;MAClB,IAAI,CAACN,SAAS,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOO,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClC,IAAI,CAACT,SAAS,CAAC,KAAK,CAAC;IACvB;EACF;;EAEA;EACAa,MAAMA,CAAA,EAAG;IACPC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACb,OAAO,CAAC,CAAC,CAAC,CAAC;IAChB,IAAI,CAACF,SAAS,CAAC,KAAK,CAAC;EACvB;;EAEA;EACA,IAAIgB,MAAMA,CAAA,EAAG;IACX,OAAO,IAAI,CAACnB,OAAO;EACrB;EAEA,IAAIM,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACL,KAAK;EACnB;EAEA,IAAImB,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAAClB,UAAU;EACxB;AACF;AAEA,eAAe,IAAIJ,SAAS,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}