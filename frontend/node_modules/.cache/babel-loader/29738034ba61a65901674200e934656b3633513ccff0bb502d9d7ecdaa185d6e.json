{"ast":null,"code":"import { $authHost, $host } from \"./index\"; // импортируем экземпляры Axios для авторизованных и неавторизованных запросов\nimport { jwtDecode } from \"jwt-decode\"; // для извлечения данных из токена\n\n// реализуем регистрацию авторизацию и проверку токена на валидность\nexport const registration = async (name, email, password_hash) => {\n  // админ на время\n  const {\n    data\n  } = await $host.post(\"api/user/registration\", {\n    name,\n    email,\n    password_hash,\n    role: \"admin\"\n  }); // получаем токен на бэке\n  // { name, email, password_hash, role }\n  localStorage.setItem(\"token\", data.token); // в локальное хранилище по ключу токен помещаем токен\n  return jwtDecode(data.token);\n  //return data;\n};\nexport const login = async (email, password_hash) => {\n  const {\n    data\n  } = await $host.post(\"api/user/login\", {\n    email,\n    password_hash\n  });\n  localStorage.setItem(\"token\", data.token);\n  return jwtDecode(data.token);\n};\nexport const check_auth = async () => {\n  const {\n    data\n  } = await $authhost.get(\"api/user/auth\");\n  localStorage.setItem(\"token\", data.token);\n  return jwtDecode(data.token);\n};\n// router.post(\"/registration\", userController.registration);\n// router.post(\"/login\", userController.login);\n// router.get(\"/auth\", authMiddleware, userController.check_auth);\n// router.get(\"/\", checkRole(\"admin\"), userController.getAll);\n// router.delete(\"/\", authMiddleware, userController.delete);","map":{"version":3,"names":["$authHost","$host","jwtDecode","registration","name","email","password_hash","data","post","role","localStorage","setItem","token","login","check_auth","$authhost","get"],"sources":["C:/Users/redmi/Desktop/autoparts-shop/frontend/src/http/userAPI.js"],"sourcesContent":["import { $authHost, $host } from \"./index\"; // импортируем экземпляры Axios для авторизованных и неавторизованных запросов\r\nimport { jwtDecode } from \"jwt-decode\"; // для извлечения данных из токена\r\n\r\n// реализуем регистрацию авторизацию и проверку токена на валидность\r\nexport const registration = async (name, email, password_hash) => {\r\n  // админ на время\r\n  const { data } = await $host.post(\"api/user/registration\", { name, email, password_hash, role: \"admin\" }); // получаем токен на бэке\r\n  // { name, email, password_hash, role }\r\n  localStorage.setItem(\"token\", data.token); // в локальное хранилище по ключу токен помещаем токен\r\n  return jwtDecode(data.token);\r\n  //return data;\r\n};\r\n\r\nexport const login = async (email, password_hash) => {\r\n  const { data } = await $host.post(\"api/user/login\", { email, password_hash });\r\n  localStorage.setItem(\"token\", data.token);\r\n  return jwtDecode(data.token);\r\n};\r\n\r\nexport const check_auth = async () => {\r\n  const { data } = await $authhost.get(\"api/user/auth\");\r\n  localStorage.setItem(\"token\", data.token);\r\n  return jwtDecode(data.token);\r\n};\r\n// router.post(\"/registration\", userController.registration);\r\n// router.post(\"/login\", userController.login);\r\n// router.get(\"/auth\", authMiddleware, userController.check_auth);\r\n// router.get(\"/\", checkRole(\"admin\"), userController.getAll);\r\n// router.delete(\"/\", authMiddleware, userController.delete);\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,SAAS,CAAC,CAAC;AAC5C,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;;AAExC;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,aAAa,KAAK;EAChE;EACA,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,uBAAuB,EAAE;IAAEJ,IAAI;IAAEC,KAAK;IAAEC,aAAa;IAAEG,IAAI,EAAE;EAAQ,CAAC,CAAC,CAAC,CAAC;EAC3G;EACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC;EAC3C,OAAOV,SAAS,CAACK,IAAI,CAACK,KAAK,CAAC;EAC5B;AACF,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOR,KAAK,EAAEC,aAAa,KAAK;EACnD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,gBAAgB,EAAE;IAAEH,KAAK;IAAEC;EAAc,CAAC,CAAC;EAC7EI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACK,KAAK,CAAC;EACzC,OAAOV,SAAS,CAACK,IAAI,CAACK,KAAK,CAAC;AAC9B,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAM;IAAEP;EAAK,CAAC,GAAG,MAAMQ,SAAS,CAACC,GAAG,CAAC,eAAe,CAAC;EACrDN,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACK,KAAK,CAAC;EACzC,OAAOV,SAAS,CAACK,IAAI,CAACK,KAAK,CAAC;AAC9B,CAAC;AACD;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}